
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOL BYTE CHAR COMPASSIGDIVIDE COMPASSIGMINUS COMPASSIGPLUS COMPASSIGTIMES CONSOLE DECIMAL DECREMENT DIVIDE DOUBLE ELSE ENUM EQUAL EVENT FALSE FLOAT FOR FOREACH GREATERTHAN GREATERTHANEQUAL IF IN INCREMENT INT LESSERTHAN LESSERTHANEQUAL LONG LPAREN MINUS MOD NEW NOTEQUAL NULL NUMBER PLUS RPAREN SBYTE SHORT SIZEOF STRING TIMES TRUE TYPEOF UINT ULONG USHORT VARIABLE WHILE WRITE WRITELINEexpression : expression opermat factorexpression : expression operlog factorexpression : termopermat : PLUS \n    | MINUS\n    | TIMES\n    | DIVIDE\n    | MODoperlog : EQUAL\n    | NOTEQUAL\n    | GREATERTHAN\n    | GREATERTHANEQUAL\n    | LESSERTHAN\n    | LESSERTHANEQUALterm : factorfactor : NUMBER\n    | VARIABLE'
    
_lr_action_items = {'NUMBER':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,],[4,4,4,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,]),'VARIABLE':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,],[5,5,5,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,]),'$end':([1,2,3,4,5,19,20,],[0,-15,-3,-16,-17,-1,-2,]),'PLUS':([1,2,3,4,5,19,20,],[8,-15,-3,-16,-17,-1,-2,]),'MINUS':([1,2,3,4,5,19,20,],[9,-15,-3,-16,-17,-1,-2,]),'TIMES':([1,2,3,4,5,19,20,],[10,-15,-3,-16,-17,-1,-2,]),'DIVIDE':([1,2,3,4,5,19,20,],[11,-15,-3,-16,-17,-1,-2,]),'MOD':([1,2,3,4,5,19,20,],[12,-15,-3,-16,-17,-1,-2,]),'EQUAL':([1,2,3,4,5,19,20,],[13,-15,-3,-16,-17,-1,-2,]),'NOTEQUAL':([1,2,3,4,5,19,20,],[14,-15,-3,-16,-17,-1,-2,]),'GREATERTHAN':([1,2,3,4,5,19,20,],[15,-15,-3,-16,-17,-1,-2,]),'GREATERTHANEQUAL':([1,2,3,4,5,19,20,],[16,-15,-3,-16,-17,-1,-2,]),'LESSERTHAN':([1,2,3,4,5,19,20,],[17,-15,-3,-16,-17,-1,-2,]),'LESSERTHANEQUAL':([1,2,3,4,5,19,20,],[18,-15,-3,-16,-17,-1,-2,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,],[1,]),'factor':([0,6,7,],[2,19,20,]),'term':([0,],[3,]),'opermat':([1,],[6,]),'operlog':([1,],[7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression opermat factor','expression',3,'p_expression_mate','funciones_sint.py',6),
  ('expression -> expression operlog factor','expression',3,'p_expression_logic','funciones_sint.py',10),
  ('expression -> term','expression',1,'p_expression_term','funciones_sint.py',14),
  ('opermat -> PLUS','opermat',1,'p_opermat_mate','funciones_sint.py',17),
  ('opermat -> MINUS','opermat',1,'p_opermat_mate','funciones_sint.py',18),
  ('opermat -> TIMES','opermat',1,'p_opermat_mate','funciones_sint.py',19),
  ('opermat -> DIVIDE','opermat',1,'p_opermat_mate','funciones_sint.py',20),
  ('opermat -> MOD','opermat',1,'p_opermat_mate','funciones_sint.py',21),
  ('operlog -> EQUAL','operlog',1,'p_operlog_logico','funciones_sint.py',24),
  ('operlog -> NOTEQUAL','operlog',1,'p_operlog_logico','funciones_sint.py',25),
  ('operlog -> GREATERTHAN','operlog',1,'p_operlog_logico','funciones_sint.py',26),
  ('operlog -> GREATERTHANEQUAL','operlog',1,'p_operlog_logico','funciones_sint.py',27),
  ('operlog -> LESSERTHAN','operlog',1,'p_operlog_logico','funciones_sint.py',28),
  ('operlog -> LESSERTHANEQUAL','operlog',1,'p_operlog_logico','funciones_sint.py',29),
  ('term -> factor','term',1,'p_term_factor','funciones_sint.py',32),
  ('factor -> NUMBER','factor',1,'p_factor_num','funciones_sint.py',35),
  ('factor -> VARIABLE','factor',1,'p_factor_num','funciones_sint.py',36),
]
